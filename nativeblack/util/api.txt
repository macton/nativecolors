PPB Audio
PP_Resource ( *Create ) ( PP_Instance instance, PP_Resource config, PPB_Audio_Callback audio_callback, void* user_data )
PP_Bool ( *IsAudio ) ( PP_Resource resource )
PP_Resource ( *GetCurrentConfig ) ( PP_Resource audio )
PP_Bool ( *StartPlayback ) ( PP_Resource audio )
PP_Bool ( *StopPlayback ) ( PP_Resource audio )

PPB AudioConfig 1.1
PP_Resource (*CreateStereo16Bit)(PP_Instance instance, PP_AudioSampleRate sample_rate, uint32_t sample_frame_count)
uint32_t (*RecommendSampleFrameCount)( PP_Instance instance, PP_AudioSampleRate sample_rate, uint32_t requested_sample_frame_count)
PP_Bool (*IsAudioConfig)(PP_Resource resource)
PP_AudioSampleRate (*GetSampleRate)(PP_Resource config)
uint32_t (*GetSampleFrameCount)(PP_Resource config)
PP_AudioSampleRate (*RecommendSampleRate)(PP_Instance instance)

PPB Core
void ( *AddRefResource ) ( PP_Resource resource )
void ( *ReleaseResource ) ( PP_Resource resource )
PP_Time ( *GetTime ) ()
PP_TimeTicks ( *GetTimeTicks ) ()
void ( *CallOnMainThread ) ( int32_t delay_in_milliseconds, struct PP_CompletionCallback callback, int32_t result )
PP_Bool ( *IsMainThread ) ()

PPB FileIO
PP_Resource ( *Create ) ( PP_Instance instance )
PP_Bool ( *IsFileIO ) ( PP_Resource resource )
int32_t ( *Open ) ( PP_Resource file_io, PP_Resource file_ref, int32_t open_flags, struct PP_CompletionCallback callback )
int32_t ( *Query ) ( PP_Resource file_io, struct PP_FileInfo* info, struct PP_CompletionCallback callback )
int32_t ( *Touch ) ( PP_Resource file_io, PP_Time last_access_time, PP_Time last_modified_time, struct PP_CompletionCallback callback )
int32_t ( *Read ) ( PP_Resource file_io, int64_t offset, char* buffer, int32_t bytes_to_read, struct PP_CompletionCallback callback )
int32_t ( *Write ) ( PP_Resource file_io, int64_t offset, const char* buffer, int32_t bytes_to_write, struct PP_CompletionCallback callback )
int32_t ( *SetLength ) ( PP_Resource file_io, int64_t length, struct PP_CompletionCallback callback )
int32_t ( *Flush ) ( PP_Resource file_io, struct PP_CompletionCallback callback )
void ( *Close ) ( PP_Resource file_io )

PPB FileRef
PP_Resource ( *Create ) ( PP_Resource file_system, const char* path )
PP_Bool ( *IsFileRef ) ( PP_Resource resource )
PP_FileSystemType ( *GetFileSystemType ) ( PP_Resource file_ref )
struct PP_Var ( *GetName ) ( PP_Resource file_ref )
struct PP_Var ( *GetPath ) ( PP_Resource file_ref )
PP_Resource ( *GetParent ) ( PP_Resource file_ref )
int32_t ( *MakeDirectory ) ( PP_Resource directory_ref, PP_Bool make_ancestors, struct PP_CompletionCallback callback )
int32_t ( *Touch ) ( PP_Resource file_ref, PP_Time last_access_time, PP_Time last_modified_time, struct PP_CompletionCallback callback )
int32_t ( *Delete ) ( PP_Resource file_ref, struct PP_CompletionCallback callback )
int32_t ( *Rename ) ( PP_Resource file_ref, PP_Resource new_file_ref, struct PP_CompletionCallback callback )

PPB FileSystem
PP_Resource ( *Create ) ( PP_Instance instance, PP_FileSystemType type )
PP_Bool ( *IsFileSystem ) ( PP_Resource resource )
int32_t ( *Open ) ( PP_Resource file_system, int64_t expected_size, struct PP_CompletionCallback callback )
PP_FileSystemType ( *GetType ) ( PP_Resource file_system )

PPB Fullscreen
PP_Bool ( *IsFullscreen ) ( PP_Instance instance )
PP_Bool ( *SetFullscreen ) ( PP_Instance instance, PP_Bool fullscreen )
PP_Bool ( *GetScreenSize ) ( PP_Instance instance, struct PP_Size* size )

PPB Graphics2D
PP_Resource ( *Create ) ( PP_Instance instance, const struct PP_Size* size, PP_Bool is_always_opaque )
PP_Bool ( *IsGraphics2D ) ( PP_Resource resource )
PP_Bool ( *Describe ) ( PP_Resource graphics_2d, struct PP_Size* size, PP_Bool* is_always_opqaue )
void ( *PaintImageData ) ( PP_Resource graphics_2d, PP_Resource image_data, const struct PP_Point* top_left, const struct PP_Rect* src_rect )
void ( *Scroll ) ( PP_Resource graphics_2d, const struct PP_Rect* clip_rect, const struct PP_Point* amount )
void ( *ReplaceContents ) ( PP_Resource graphics_2d, PP_Resource image_data )
int32_t ( *Flush ) ( PP_Resource graphics_2d, struct PP_CompletionCallback callback )

PPB Graphics3D
int32_t ( *GetAttribMaxValue ) ( PP_Resource instance, int32_t attribute, int32_t* value )
PP_Resource ( *Create ) ( PP_Instance instance, PP_Resource share_context, const int32_t attrib_list[] )
PP_Bool ( *IsGraphics3D ) ( PP_Resource resource )
int32_t ( *GetAttribs ) ( PP_Resource context, int32_t attrib_list[] )
int32_t ( *SetAttribs ) ( PP_Resource context, int32_t attrib_list[] )
int32_t ( *GetError ) ( PP_Resource context )
int32_t ( *ResizeBuffers ) ( PP_Resource context, int32_t width, int32_t height )
int32_t ( *SwapBuffers ) ( PP_Resource context, struct PP_CompletionCallback callback )

PPB ImageData
PP_ImageDataFormat ( *GetNativeImageDataFormat ) ()
PP_Bool ( *IsImageDataFormatSupported ) ( PP_ImageDataFormat format )
PP_Resource ( *Create ) ( PP_Instance instance, PP_ImageDataFormat format, const struct PP_Size* size, PP_Bool init_to_zero )
PP_Bool ( *IsImageData ) ( PP_Resource image_data )
PP_Bool ( *Describe ) ( PP_Resource image_data, struct PP_ImageDataDesc* desc )
void* ( *Map ) ( PP_Resource image_data )
void ( *Unmap ) ( PP_Resource image_data )

PPB InputEvent
int32_t ( *RequestInputEvents ) ( PP_Instance instance, uint32_t event_classes )
int32_t ( *RequestFilteringInputEvents ) ( PP_Instance instance, uint32_t event_classes )
void ( *ClearInputEventRequest ) ( PP_Instance instance, uint32_t event_classes )
PP_Bool ( *IsInputEvent ) ( PP_Resource resource )
PP_InputEvent_Type ( *GetType ) ( PP_Resource event )
PP_TimeTicks ( *GetTimeStamp ) ( PP_Resource event )
uint32_t ( *GetModifiers ) ( PP_Resource event )

PPB Instance
PP_Bool ( *BindGraphics ) ( PP_Instance instance, PP_Resource device )
PP_Bool ( *IsFullFrame ) ( PP_Instance instance )

PPB KeyboardInputEvent
PP_Resource ( *Create ) ( PP_Instance instance, PP_InputEvent_Type type, PP_TimeTicks time_stamp, uint32_t modifiers, uint32_t key_code, struct PP_Var character_text )
PP_Bool ( *IsKeyboardInputEvent ) ( PP_Resource resource )
uint32_t ( *GetKeyCode ) ( PP_Resource key_event )
struct PP_Var ( *GetCharacterText ) ( PP_Resource character_event )

PPB Messaging
void ( *PostMessage ) ( PP_Instance instance, struct PP_Var message )

PPB MouseInputEvent
PP_Resource ( *Create ) ( PP_Instance instance, PP_InputEvent_Type type, PP_TimeTicks time_stamp, uint32_t modifiers, PP_InputEvent_MouseButton mouse_button, const struct PP_Point* mouse_position, int32_t click_count, const struct PP_Point* mouse_movement )
PP_Bool ( *IsMouseInputEvent ) ( PP_Resource resource )
PP_InputEvent_MouseButton ( *GetButton ) ( PP_Resource mouse_event )
struct PP_Point ( *GetPosition ) ( PP_Resource mouse_event )
int32_t ( *GetClickCount ) ( PP_Resource mouse_event )
struct PP_Point ( *GetMovement ) ( PP_Resource mouse_event )

PPB MouseLock
int32_t ( *LockMouse ) ( PP_Instance instance, struct PP_CompletionCallback callback )
void ( *UnlockMouse ) ( PP_Instance instance )

PPB OpenGLES2
void ( *ActiveTexture ) ( PP_Resource context, GLenum texture )
void ( *AttachShader ) ( PP_Resource context, GLuint program, GLuint shader )
void ( *BindAttribLocation ) ( PP_Resource context, GLuint program, GLuint index, const char* name )
void ( *BindBuffer ) ( PP_Resource context, GLenum target, GLuint buffer )
void ( *BindFramebuffer ) ( PP_Resource context, GLenum target, GLuint framebuffer )
void ( *BindRenderbuffer ) ( PP_Resource context, GLenum target, GLuint renderbuffer )
void ( *BindTexture ) ( PP_Resource context, GLenum target, GLuint texture )
void ( *BlendColor ) ( PP_Resource context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
void ( *BlendEquation ) ( PP_Resource context, GLenum mode )
void ( *BlendEquationSeparate ) ( PP_Resource context, GLenum modeRGB, GLenum modeAlpha )
void ( *BlendFunc ) ( PP_Resource context, GLenum sfactor, GLenum dfactor )
void ( *BlendFuncSeparate ) ( PP_Resource context, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha )
void ( *BufferData ) ( PP_Resource context, GLenum target, GLsizeiptr size, const void* data, GLenum usage )
void ( *BufferSubData ) ( PP_Resource context, GLenum target, GLintptr offset, GLsizeiptr size, const void* data )
GLenum ( *CheckFramebufferStatus ) ( PP_Resource context, GLenum target )
void ( *Clear ) ( PP_Resource context, GLbitfield mask )
void ( *ClearColor ) ( PP_Resource context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
void ( *ClearDepthf ) ( PP_Resource context, GLclampf depth )
void ( *ClearStencil ) ( PP_Resource context, GLint s )
void ( *ColorMask ) ( PP_Resource context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha )
void ( *CompileShader ) ( PP_Resource context, GLuint shader )
void ( *CompressedTexImage2D ) ( PP_Resource context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data )
void ( *CompressedTexSubImage2D ) ( PP_Resource context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data )
void ( *CopyTexImage2D ) ( PP_Resource context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border )
void ( *CopyTexSubImage2D ) ( PP_Resource context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height )
GLuint ( *CreateProgram ) ( PP_Resource context )
GLuint ( *CreateShader ) ( PP_Resource context, GLenum type )
void ( *CullFace ) ( PP_Resource context, GLenum mode )
void ( *DeleteBuffers ) ( PP_Resource context, GLsizei n, const GLuint* buffers )
void ( *DeleteFramebuffers ) ( PP_Resource context, GLsizei n, const GLuint* framebuffers )
void ( *DeleteProgram ) ( PP_Resource context, GLuint program )
void ( *DeleteRenderbuffers ) ( PP_Resource context, GLsizei n, const GLuint* renderbuffers )
void ( *DeleteShader ) ( PP_Resource context, GLuint shader )
void ( *DeleteTextures ) ( PP_Resource context, GLsizei n, const GLuint* textures )
void ( *DepthFunc ) ( PP_Resource context, GLenum func )
void ( *DepthMask ) ( PP_Resource context, GLboolean flag )
void ( *DepthRangef ) ( PP_Resource context, GLclampf zNear, GLclampf zFar )
void ( *DetachShader ) ( PP_Resource context, GLuint program, GLuint shader )
void ( *Disable ) ( PP_Resource context, GLenum cap )
void ( *DisableVertexAttribArray ) ( PP_Resource context, GLuint index )
void ( *DrawArrays ) ( PP_Resource context, GLenum mode, GLint first, GLsizei count )
void ( *DrawElements ) ( PP_Resource context, GLenum mode, GLsizei count, GLenum type, const void* indices )
void ( *Enable ) ( PP_Resource context, GLenum cap )
void ( *EnableVertexAttribArray ) ( PP_Resource context, GLuint index )
void ( *Finish ) ( PP_Resource context )
void ( *Flush ) ( PP_Resource context )
void ( *FramebufferRenderbuffer ) ( PP_Resource context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer )
void ( *FramebufferTexture2D ) ( PP_Resource context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level )
void ( *FrontFace ) ( PP_Resource context, GLenum mode )
void ( *GenBuffers ) ( PP_Resource context, GLsizei n, GLuint* buffers )
void ( *GenerateMipmap ) ( PP_Resource context, GLenum target )
void ( *GenFramebuffers ) ( PP_Resource context, GLsizei n, GLuint* framebuffers )
void ( *GenRenderbuffers ) ( PP_Resource context, GLsizei n, GLuint* renderbuffers )
void ( *GenTextures ) ( PP_Resource context, GLsizei n, GLuint* textures )
void ( *GetActiveAttrib ) ( PP_Resource context, GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name )
void ( *GetActiveUniform ) ( PP_Resource context, GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name )
void ( *GetAttachedShaders ) ( PP_Resource context, GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders )
GLint ( *GetAttribLocation ) ( PP_Resource context, GLuint program, const char* name )
void ( *GetBooleanv ) ( PP_Resource context, GLenum pname, GLboolean* params )
void ( *GetBufferParameteriv ) ( PP_Resource context, GLenum target, GLenum pname, GLint* params )
GLenum ( *GetError ) ( PP_Resource context )
void ( *GetFloatv ) ( PP_Resource context, GLenum pname, GLfloat* params )
void ( *GetFramebufferAttachmentParameteriv ) ( PP_Resource context, GLenum target, GLenum attachment, GLenum pname, GLint* params )
void ( *GetIntegerv ) ( PP_Resource context, GLenum pname, GLint* params )
void ( *GetProgramiv ) ( PP_Resource context, GLuint program, GLenum pname, GLint* params )
void ( *GetProgramInfoLog ) ( PP_Resource context, GLuint program, GLsizei bufsize, GLsizei* length, char* infolog )
void ( *GetRenderbufferParameteriv ) ( PP_Resource context, GLenum target, GLenum pname, GLint* params )
void ( *GetShaderiv ) ( PP_Resource context, GLuint shader, GLenum pname, GLint* params )
void ( *GetShaderInfoLog ) ( PP_Resource context, GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog )
void ( *GetShaderPrecisionFormat ) ( PP_Resource context, GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision )
void ( *GetShaderSource ) ( PP_Resource context, GLuint shader, GLsizei bufsize, GLsizei* length, char* source )
const GLubyte* ( *GetString ) ( PP_Resource context, GLenum name )
void ( *GetTexParameterfv ) ( PP_Resource context, GLenum target, GLenum pname, GLfloat* params )
void ( *GetTexParameteriv ) ( PP_Resource context, GLenum target, GLenum pname, GLint* params )
void ( *GetUniformfv ) ( PP_Resource context, GLuint program, GLint location, GLfloat* params )
void ( *GetUniformiv ) ( PP_Resource context, GLuint program, GLint location, GLint* params )
GLint ( *GetUniformLocation ) ( PP_Resource context, GLuint program, const char* name )
void ( *GetVertexAttribfv ) ( PP_Resource context, GLuint index, GLenum pname, GLfloat* params )
void ( *GetVertexAttribiv ) ( PP_Resource context, GLuint index, GLenum pname, GLint* params )
void ( *GetVertexAttribPointerv ) ( PP_Resource context, GLuint index, GLenum pname, void** pointer )
void ( *Hint ) ( PP_Resource context, GLenum target, GLenum mode )
GLboolean ( *IsBuffer ) ( PP_Resource context, GLuint buffer )
GLboolean ( *IsEnabled ) ( PP_Resource context, GLenum cap )
GLboolean ( *IsFramebuffer ) ( PP_Resource context, GLuint framebuffer )
GLboolean ( *IsProgram ) ( PP_Resource context, GLuint program )
GLboolean ( *IsRenderbuffer ) ( PP_Resource context, GLuint renderbuffer )
GLboolean ( *IsShader ) ( PP_Resource context, GLuint shader )
GLboolean ( *IsTexture ) ( PP_Resource context, GLuint texture )
void ( *LineWidth ) ( PP_Resource context, GLfloat width )
void ( *LinkProgram ) ( PP_Resource context, GLuint program )
void ( *PixelStorei ) ( PP_Resource context, GLenum pname, GLint param )
void ( *PolygonOffset ) ( PP_Resource context, GLfloat factor, GLfloat units )
void ( *ReadPixels ) ( PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels )
void ( *ReleaseShaderCompiler ) ( PP_Resource context )
void ( *RenderbufferStorage ) ( PP_Resource context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height )
void ( *SampleCoverage ) ( PP_Resource context, GLclampf value, GLboolean invert )
void ( *Scissor ) ( PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height )
void ( *ShaderBinary ) ( PP_Resource context, GLsizei n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length )
void ( *ShaderSource ) ( PP_Resource context, GLuint shader, GLsizei count, const char** str, const GLint* length )
void ( *StencilFunc ) ( PP_Resource context, GLenum func, GLint ref, GLuint mask )
void ( *StencilFuncSeparate ) ( PP_Resource context, GLenum face, GLenum func, GLint ref, GLuint mask )
void ( *StencilMask ) ( PP_Resource context, GLuint mask )
void ( *StencilMaskSeparate ) ( PP_Resource context, GLenum face, GLuint mask )
void ( *StencilOp ) ( PP_Resource context, GLenum fail, GLenum zfail, GLenum zpass )
void ( *StencilOpSeparate ) ( PP_Resource context, GLenum face, GLenum fail, GLenum zfail, GLenum zpass )
void ( *TexImage2D ) ( PP_Resource context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels )
void ( *TexParameterf ) ( PP_Resource context, GLenum target, GLenum pname, GLfloat param )
void ( *TexParameterfv ) ( PP_Resource context, GLenum target, GLenum pname, const GLfloat* params )
void ( *TexParameteri ) ( PP_Resource context, GLenum target, GLenum pname, GLint param )
void ( *TexParameteriv ) ( PP_Resource context, GLenum target, GLenum pname, const GLint* params )
void ( *TexSubImage2D ) ( PP_Resource context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels )
void ( *Uniform1f ) ( PP_Resource context, GLint location, GLfloat x )
void ( *Uniform1fv ) ( PP_Resource context, GLint location, GLsizei count, const GLfloat* v )
void ( *Uniform1i ) ( PP_Resource context, GLint location, GLint x )
void ( *Uniform1iv ) ( PP_Resource context, GLint location, GLsizei count, const GLint* v )
void ( *Uniform2f ) ( PP_Resource context, GLint location, GLfloat x, GLfloat y )
void ( *Uniform2fv ) ( PP_Resource context, GLint location, GLsizei count, const GLfloat* v )
void ( *Uniform2i ) ( PP_Resource context, GLint location, GLint x, GLint y )
void ( *Uniform2iv ) ( PP_Resource context, GLint location, GLsizei count, const GLint* v )
void ( *Uniform3f ) ( PP_Resource context, GLint location, GLfloat x, GLfloat y, GLfloat z )
void ( *Uniform3fv ) ( PP_Resource context, GLint location, GLsizei count, const GLfloat* v )
void ( *Uniform3i ) ( PP_Resource context, GLint location, GLint x, GLint y, GLint z )
void ( *Uniform3iv ) ( PP_Resource context, GLint location, GLsizei count, const GLint* v )
void ( *Uniform4f ) ( PP_Resource context, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
void ( *Uniform4fv ) ( PP_Resource context, GLint location, GLsizei count, const GLfloat* v )
void ( *Uniform4i ) ( PP_Resource context, GLint location, GLint x, GLint y, GLint z, GLint w )
void ( *Uniform4iv ) ( PP_Resource context, GLint location, GLsizei count, const GLint* v )
void ( *UniformMatrix2fv ) ( PP_Resource context, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value )
void ( *UniformMatrix3fv ) ( PP_Resource context, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value )
void ( *UniformMatrix4fv ) ( PP_Resource context, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value )
void ( *UseProgram ) ( PP_Resource context, GLuint program )
void ( *ValidateProgram ) ( PP_Resource context, GLuint program )
void ( *VertexAttrib1f ) ( PP_Resource context, GLuint indx, GLfloat x )
void ( *VertexAttrib1fv ) ( PP_Resource context, GLuint indx, const GLfloat* values )
void ( *VertexAttrib2f ) ( PP_Resource context, GLuint indx, GLfloat x, GLfloat y )
void ( *VertexAttrib2fv ) ( PP_Resource context, GLuint indx, const GLfloat* values )
void ( *VertexAttrib3f ) ( PP_Resource context, GLuint indx, GLfloat x, GLfloat y, GLfloat z )
void ( *VertexAttrib3fv ) ( PP_Resource context, GLuint indx, const GLfloat* values )
void ( *VertexAttrib4f ) ( PP_Resource context, GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
void ( *VertexAttrib4fv ) ( PP_Resource context, GLuint indx, const GLfloat* values )
void ( *VertexAttribPointer ) ( PP_Resource context, GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr )
void ( *Viewport ) ( PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height )

PPB URLLoader
PP_Resource ( *Create ) ( PP_Instance instance )
PP_Bool ( *IsURLLoader ) ( PP_Resource resource )
int32_t ( *Open ) ( PP_Resource loader, PP_Resource request_info, struct PP_CompletionCallback callback )
int32_t ( *FollowRedirect ) ( PP_Resource loader, struct PP_CompletionCallback callback )
PP_Bool ( *GetUploadProgress ) ( PP_Resource loader, int64_t* bytes_sent, int64_t* total_bytes_to_be_sent )
PP_Bool ( *GetDownloadProgress ) ( PP_Resource loader, int64_t* bytes_received, int64_t* total_bytes_to_be_received )
PP_Resource ( *GetResponseInfo ) ( PP_Resource loader )
int32_t ( *ReadResponseBody ) ( PP_Resource loader, void* buffer, int32_t bytes_to_read, struct PP_CompletionCallback callback )
int32_t ( *FinishStreamingToFile ) ( PP_Resource loader, struct PP_CompletionCallback callback )
void ( *Close ) ( PP_Resource loader )

PPB URLRequestInfo
PP_Resource ( *Create ) ( PP_Instance instance )
PP_Bool ( *IsURLRequestInfo ) ( PP_Resource resource )
PP_Bool ( *SetProperty ) ( PP_Resource request, PP_URLRequestProperty property, struct PP_Var value )
PP_Bool ( *AppendDataToBody ) ( PP_Resource request, const void* data, uint32_t len )
PP_Bool ( *AppendFileToBody ) ( PP_Resource request, PP_Resource file_ref, int64_t start_offset, int64_t number_of_bytes, PP_Time expected_last_modified_time )

PPB URLResponseInfo
PP_Bool ( *IsURLResponseInfo ) ( PP_Resource resource )
struct PP_Var ( *GetProperty ) ( PP_Resource response, PP_URLResponseProperty property )
PP_Resource ( *GetBodyAsFileRef ) ( PP_Resource response )

PPB Var
void ( *AddRef ) ( struct PP_Var var )
void ( *Release ) ( struct PP_Var var )
struct PP_Var ( *VarFromUtf8 ) ( const char* data, uint32_t len )
const char* ( *VarToUtf8 ) ( struct PP_Var var, uint32_t* len )

PPB VarArrayBuffer
struct PP_Var ( *Create ) ( uint32_t size_in_bytes )
PP_Bool ( *ByteLength ) ( struct PP_Var array, uint32_t* byte_length )
void* ( *Map ) ( struct PP_Var array )
void ( *Unmap ) ( struct PP_Var array )

PPB View
PP_Bool ( *IsView ) ( PP_Resource resource )
PP_Bool ( *GetRect ) ( PP_Resource resource, struct PP_Rect* rect )
PP_Bool ( *IsFullscreen ) ( PP_Resource resource )
PP_Bool ( *IsVisible ) ( PP_Resource resource )
PP_Bool ( *IsPageVisible ) ( PP_Resource resource )
PP_Bool ( *GetClipRect ) ( PP_Resource resource, struct PP_Rect* clip )

PPB WebSocket
PP_Resource ( *Create ) ( PP_Instance instance )
PP_Bool ( *IsWebSocket ) ( PP_Resource resource )
int32_t ( *Connect ) ( PP_Resource web_socket, struct PP_Var url, const struct PP_Var protocols[], uint32_t protocol_count, struct PP_CompletionCallback callback )
int32_t ( *Close ) ( PP_Resource web_socket, uint16_t code, struct PP_Var reason, struct PP_CompletionCallback callback )
int32_t ( *ReceiveMessage ) ( PP_Resource web_socket, struct PP_Var* message, struct PP_CompletionCallback callback )
int32_t ( *SendMessage ) ( PP_Resource web_socket, struct PP_Var message )
uint64_t ( *GetBufferedAmount ) ( PP_Resource web_socket )
uint16_t ( *GetCloseCode ) ( PP_Resource web_socket )
struct PP_Var ( *GetCloseReason ) ( PP_Resource web_socket )
PP_Bool ( *GetCloseWasClean ) ( PP_Resource web_socket )
struct PP_Var ( *GetExtensions ) ( PP_Resource web_socket )
struct PP_Var ( *GetProtocol ) ( PP_Resource web_socket )
PP_WebSocketReadyState ( *GetReadyState ) ( PP_Resource web_socket )
struct PP_Var ( *GetURL ) ( PP_Resource web_socket )

PPB WheelInputEvent
PP_Resource ( *Create ) ( PP_Instance instance, PP_TimeTicks time_stamp, uint32_t modifiers, const struct PP_FloatPoint* wheel_delta, const struct PP_FloatPoint* wheel_ticks, PP_Bool scroll_by_page )
PP_Bool ( *IsWheelInputEvent ) ( PP_Resource resource )
struct PP_FloatPoint ( *GetDelta ) ( PP_Resource wheel_event )
struct PP_FloatPoint ( *GetTicks ) ( PP_Resource wheel_event )
PP_Bool ( *GetScrollByPage ) ( PP_Resource wheel_event )

PPP InputEvent
PP_Bool ( *HandleInputEvent ) ( PP_Instance instance, PP_Resource input_event )

PPP Instance
PP_Bool ( *DidCreate ) ( PP_Instance instance, uint32_t argc, const char* argn[], const char* argv[] )
void ( *DidDestroy ) ( PP_Instance instance )
void ( *DidChangeView ) ( PP_Instance instance, PP_Resource view )
void ( *DidChangeFocus ) ( PP_Instance instance, PP_Bool has_focus )
PP_Bool ( *HandleDocumentLoad ) ( PP_Instance instance, PP_Resource url_loader )

PPP Messaging
void ( *HandleMessage ) ( PP_Instance instance, struct PP_Var message )

PPP MouseLockLost
void ( *MouseLockLost ) ( PP_Instance instance )
