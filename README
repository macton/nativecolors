Native Colors SDK
-----------------

Focused on making standard interfaces work on Native Client (NaCl) to make porting other stuff easier.

export NATIVECOLORS_ROOT to this directory in your shell.

#todo write more stuff here

DIRECTORY STRUCTURE
-------------------
Loosely based on fhs http://www.pathname.com/fhs/pub/fhs-2.3.html

/usr

/usr/src
- Source specific to this environment 

/usr/src/client
- Applications intended to run on the client. Installed to /srv/www

/usr/src/client/examples
- Very small examples to get you started creating new nativecolors or general native client projects

/usr/src/host
- Applications intended to run on the host. Installed to /usr/bin

/usr/src/libraries
- Libraries intended that may be used for either host or client applications

/usr/packages
- Read-only hosted external source packages.
- Do not change from original source. Any necessary patches should be applied in /usr/ports.

/usr/ports
- Build scripts and any additional patches required to build packages for the nativecolors environment
  or native client in general.

/usr/ports/libraries
- Libraries intended that may be used for either host or client applications

/usr/ports/host
- Applications intended to be run on the host. Installed to /usr/bin/

/usr/ports/client
- Applications intended to be run on the client. Installed to /srv/www/

/usr/bin
- Pre-build binaries (nexe) which can be used on in the nativecolors environment on any host.

/usr/include
- Include files from ports and /src projects used to compile projects.

/usr/lib
- Pre-built libraries from from ports and /src projects used to build projects.

/usr/archive
- Random stuff saved for reference

/srv
- Files expected to be served from a server running on the environment hosting these files

/srv/www
- Files expected to be served from an http server. This directory is assumed to be the root of that
  server.
- Projects from /usr/ports/client and /usr/src may be pre-installed in this directory.


TODO
----
Potential roadmap:
- userspace kernel (ioctl)
- loop device driver
- FUSE driver
- FUSE file based on AncientFS/UnixFS http://osxbook.com/blog/2008/12/16/more-user-space-file-system-goodies/
- FUSE ext driver http://alperakcan.org/?open=projects&project=fuse-ext2
- Socket API + server proxy?
- BusyBox  http://www.busybox.net/
- GCC

Some stuff I want to do in no particular order:

- shell
-- kb support for curses+nativeblue+hterm
-- kb support for curses+nativeyellow
-- Shells: tcsh? sh? bash? ssh? screen?
-- launch process
-- copy environment to sandbox file system
- gcc.nexe
- ddlt.nexe
- Use Tundra build system
- native-host server to provide file i/o via dropbox API. Use liboauth.
-- Or maybe dropbox API to FileSystem API sync. See: http://www.html5rocks.com/en/tutorials/file/filesystem/
-- I wonder if a FUSE port and then a dropbox FUSE driver would be better?
- native-host server to provide socket proxy for client builds. Use libwebsockets.
- Build some stuff from nacl_ports
-- bzip2-1.0.6
-- expat-2.0.1
-- ffmpeg-0.5
-- fftw-3.2.2
-- fontconfig-2.7.3
-- FreeImage-3.14.1
-- freetype-2.1.10
-- ImageMagick-6.5.4-10
-- jpeg-6b
-- jsoncpp-0.5.0
-- libpng-1.2.40
-- libtomcrypt-1.17
-- libtommath-0.41
-- lua-5.1.4
-- openssl-1.0.0e
-- tiff-3.9.1
-- tinyxml
-- x264-snapshot-20091023-2245
- Separate lib/bin directories per target and configuration type
- Include necessary native-host stuff from nacl_sdk
- Note on naming. e.g. see: http://gcc.gnu.org/onlinedocs/gccint/Configure-Terms.html
- vim.nexe
- Selectively redirect stdout to another host over socket
-- Select new driver for /dev/stdout?
- Auto-map function calls from javascript environment to nativeblue
- POSIX IPC http://docs.oracle.com/cd/E19455-01/806-4750/6jdqdfltf/index.html
- glut
- remap gles functions to command queue
